【进程】
.exe 不能叫程序，只是一个文件
程序，去运行1个.exe，在内存中操作系统开始执行它了，叫做进程
后台进程  前台进程
Word是进程方式执行的，前台进程
MySQL是后台方式执行的，后台进程

【线程】
打开迅雷 –> 起一条进程 -> 迅雷可以同时下载多个文件每下载的一个文件条线就是一个线程
有的程序可以起多个进程

1个进程可以有多个相互独立的线程最大发挥【多核心CPU】的性能

【CPU执行任务】
在一个时刻，一颗CPU只能执行一个任务
一颗CPU轮询执行多个任务就是【并发】
多颗CPU轮询执行多个任务就是【并行】
现在传统的语言，多任务就是分配在一颗CPU上，多核心不能发挥

Golang支持并行和并发

【协程Go主程】
最早的程序没有并发和并行，一个进程打天下 --> 线程发挥CPU能力 能做到并发了
硬件发展比软件发展快
但是线程还是比较吃资源，占用CPU、内存比较多，有些地方还是物理态的，比较笨拙

每创建一个goroutine，初始化完成可能只是 几个 KB
随着程序运行耗费资源加大，goroutine耗费资源加大
当占用资源达到一定限制stack overflow栈溢出
导致goroutine终止执行

【Golang协程】
1.能否让CPU全部参与工作，CPU有8个核心就把任务分配给8个核心同时并行
2.线程还是偏重底层优化做成逻辑态的编译器优化算法优化，让线程变得更加轻巧，
CPU、内存占用更小了，引出协程

Go主线程类似于传统语言的进程
跑一个主线程，里面有多个协程
Golang轻轻松松可以起上万个协程，非常稳定
主线程里面可以跑多个协程goroutine

编译器把原来线程中很多可以共享的东西拿过来共享给协程，协程更轻量级

【Go协程特点】
1.有独立栈空间
2.共享程序对空间
3.调度由程序员控制 go 关键字
4.逻辑态轻量级编译器优化的轻量级线程

【主线程】
物理线程，直接作用在CPU上，重量级 + 物理态 非常耗费CPU资源

【协程】
编译器从主线程逻辑出的逻辑态协程，轻量级 + 逻辑态 CPU耗费小

其他语言的并发机制一般基于【物理态的线程】开启过多的物理线程资源耗费大
凸显Golang在并发上的优势

【设置Golang运行的CPU数 runtime】
cpuNum := runtime.NumCPU()
runtime.GOMAXPROCS(cpuNum)

程序的运行与退出以主线程的运行与退出为准
1.如果主线程退出了，则协程即使没有执行完毕也会退出
2.主线程没退出，协程执行完任务就自己退出
主线程什么时候退出，协程什么时候结束，需要一个【通信机制】

【goroutine并发并行数据抢夺问题】
# 编译发现多个goroutine并发并行抢夺同一个资源的竞争race情况
go build -race main.go

【全局的互斥锁】
声明一个全局的互斥锁
lock sync.Mutex sync synchornized 同步 Mutex 互斥

var (
	myMap = make(map[int]int, 10)
	lock sync.Mutex
)

//加锁
lock.Lock()
myMap[n] = res
//解锁
lock.Unlock()

lock.Lock()
for i, v := range myMap {
	fmt.Printf("map[%d]=%d\n", i, v)
}
lock.Unlock()

协程1拿到锁，继续执行操作myMap，执行完解锁
协程2来了，看锁是否加上的，协程2就被Go底层放到【队列中等待】
协程3来了，一看锁还加着【队列中等待】
协程4来了，协程1还加着锁【队列中等待】
协程1执行完毕，解锁，【底层有一种机制，从协程队列取出排队在最前面的协程去执行】
如果其他的协程等这把锁一直没等到，就会【超时】

【channel】
使用【全局变量myMap】+【sync.Mutex锁同步】解决goroutine通信可行，但不完美
1.主线程等待所有goroutine全部完成的时间很难确定，手动sleep时间段仅仅是人的估算
2.实际上没有利用多个协程对全局变量的读写操作，还是回归到了串行

channel 引用传递 队列 先进先出 协程安全 多goroutine访问不需要加锁
intChan 的值=0xc04207a000 intChan本身的地址=0xc042068018
intChan==0xc042068018 存储 [ 0xc04207a000 ]
把一个channel传到一个函数中，操作的是同一个channel，引用类型

读[pop] 写[push] channel都是阻塞的
【阻塞】
同一个channel 子协程g1向它写push 子协程g2从它读pop

g1有10行代码 执行到 第2行 向channel 写入push数据 后面的8行卡着不执行了
g1什么时候解除阻塞?
g2从channel把数据读pop走 将g1的阻塞就解除了，后面的8行代码可以执行了
g1阻塞需要其他goroutine来解除阻塞

同样
g2从channel读pop数据也是阻塞的 g2有10行代码 第3行从channel取数据 后面7行阻塞
g2什么时候解除阻塞?
g1向管道channel写入push进数据

g1写push 和 g2读pop 都是阻塞的 彼此解除对方的阻塞

主协程从channel读取pop数据，这个数据读不到，阻塞
主协程什么时候解除阻塞?
子协程g1 和/或 子协程g2 向该channel写入push数据后 主线程解除阻塞

channel，通道
概念：专门用于goroution之间，传递数据的。类似于通信的消息队列
语法：数据类型，make()，也是引用类型的数据

make初始化channel需要关联一种数据类型 可以关联 string int 指明该channel能存储的数据类型
var intChan chan int // nil chan，同map一样，不能使用。


操作：goroutine可以从chan中读取数据，另一个goroutine从中写入数据
对同一个channel，同一个goroutine无法对其 既读又写
读 写要先执行1个 读的时候阻塞了 写怎么执行? 写的时候阻塞了 读怎么执行?

操作运算符：<-
从chan中读取数据,data := <- chan
向chan中写入数据, chan <- data

阻塞：对于chan的读取和写入的操作，都是阻塞式的。
阻塞式：导致程序暂时不能执行，直到解除阻塞。

从chan中读取数据：阻塞式，直到另一个goroutine向通道中写入数据，解除阻塞。
向chan中写入数据：阻塞式，直到另一个goroutine从通道中将数据读取出，解除阻塞。
读pop 和 写push 是对应的，g1想读成功g2要向里面写，g2想写成功g1要把数据读走

如果通道带缓存，写阻塞要发生在通道满的情况下,读阻塞发生在通道读取pop完的情况下

通道本身是线程/协程安全的，同一个时刻，只能允许1个goroutine访问读/写

管道：取最前面的，【取完后长度减少】
intChan <- item
数据在管道尾部追加
channel 和 map 不同，Map会自动增长键值对，channel不能自动增长
容量是make指定的，管道在make后容量不会变化
管道的价值在于 边放边取
channel执行了pop操作len减少cap不变
channel的cap在push满后就不能再放入元素了
channel关闭后只可读不可写 panic:send on closed channel
未关闭pop掉所有元素后继续pop则deadlock

把管道存储的类型声明为 空接口 就可以放 多态数组
存放任意类型的channel
allChan := make(chan interface{}, 3)

【类型断言】
// 下面的写法是错误的!编译不通过
// 在编译的层面 认为 newCat 是空接口类型 接口类型里面是没有字段
// 编译层面 =/= 运行层面
// fmt.Printf("newCat.Name=%v", newCat.Name)

//使用类型断言
a := newCat.(Cat)
fmt.Printf("newCat.Name=%v", a.Name)

从通道中读取数据：
同 value,ok := map[key] 类似
ok数值为true，是map[key]的值；ok数值为false，map没有该key

data := <- chan
data,ok := <- chan
ok数值为true，通道正常，读取到的data数据有效可用
ok数值为false，通道异常，一般是通道关闭，【读取到data是通道类型的默认零值，读取到的该零值无效不可用】

通道的关闭：发送方如果数据写入完毕，可以关闭通道，用于通知接受方数据传递完毕
            通道的关闭操作发送方和接收方都可以做，但是使用中没有接收方关闭通道的
g1-->chan 写入数据
	向通道写数据的一方，知道自己向通道写入多少数据就写完了
g2-->chan 读取数据
	从通道接收数据的一方，往往并不知道发送方写完还是没写完
	轮询去读，如果读取到最后，chan的所有数据都读取pop掉了
	该goroutine阻塞，发送方没有数据写入给它解除阻塞 导致 deadlock
	接收方读取close的chan这里的value是false
g3
g4
...

发送方 【close(channel)】 要 接收方在
for {
    【data,ok := <- chan】
    if !ok {
        【break】
    }
}
配合break使用
关闭的通道也能读取返回通道类型的零值但是没有意义

【channel遍历】
for range：数组，切片，map，string，chan
	数组/切片/string--->index，value
	map--->key, value
	chan--->value

普通for循环 for i := 0; i < len(channel); i++ {
这样遍历只能取出 len(channel)/2 个元素 因为每 pop 1个元素 len会减去1
容量遍历也不行，容量也不能代表管道有多少个数据
所以channel遍历不能使用普通for循环 要使用 for...range...

如果不关闭管道一直遍历 for v := range channel { 会出现deadlock的错误
fatal error : all goroutines are asleep - deadlock!

如果channel已经关闭，则会正常遍历数据，遍历完后，就会退出遍历
close(channel)
for v := range channel { 正常运行不会deadlock

【缓冲通道】自带一块缓冲区，可以暂时存储数据，如果缓冲区满了，才会阻塞

【非缓冲通道】默认创建的通道，都是非缓冲的，阻塞都是即时发生的，
写入1个数据就阻塞，等待其他协程读取这个数据，解除阻塞
读取1个数据就阻塞，等待其他协程新写入1个数据，解除阻塞

双向通道：默认都是双向 可读可写 make(chan Type)
定向通道：也叫单向通道，只读，只写
    只读：make(<- chan Type)，只能读取数据，不能写入数据 <- chan
	只写：make(chan <- Type)，只能写入数据，不能读取数据 chan <- data


单向通道在创建通道时，没有意义，都是创建双向的。
单向通道在传递参数的时候使用：
	函数，只有写入数据，单向通道限定方向
	函数，只有读取数据，单向通道限定方向
·语法级别：保证通道操作安全

【定时器timer对chan的操作】
1.Timer：计时器 	NewTimer(duration)-->*Timer对象：struct：字段C  <-chan Time
2.After(duration)-->  <-chan Time

【select分支语句 通道读写操作选择器】
随机选择可执行的case
没有case可运行它将阻塞，直到有case可执行

select的每一个case都必须是一个通道操作
要么是读取通道的操作/要么是写入通道操作

select {
	case chan1读写操作:
		分支1
	case chan2读写操作:
		分支2
}
两个case中的通道都可执行，随机选择一个case的通道操作 和 对应分支执行
其他case的通道操作 和 分支 都不执行
通道操作 和 对应分支 都随机
如果chan1读写操作 chan2读写操作 都不能执行 则 select deadlock

【sync.WaitGroup 同步等待组】
同步等待组WaitGourp,创建出来 内置计数器 counter 值为 0
Add()和Done()设置counter的值,
wg.Add(),设置counter的值,有几个goroutine执行就设置几
wg.Done()，将counter减1，同Add(-1)
wg.Wait()
哪个goroutine执行了Wait(),哪个goroutine就会被阻塞
直到counter为0 对应的goroutine 解除阻塞
WaitGroup内置计数器counter值不能为负数,否则会引发恐慌panic

如果在main协程的main函数
func main(){
    wg.Add(3)
	go printNum1(&wg)
	go printNum2(&wg)
}
fatal error: all goroutines are asleep - deadlock!



